package com.flightapp.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.flightapp.entity.TicketBooking;
import com.flightapp.service.TiceketBookingService;

@RestController
@RequestMapping("/user")
public class TickectBookingController {
	
	@Autowired
	private TiceketBookingService ticketBookingService;
	
	@DeleteMapping("/cancelFlight/{flightNumber}")
	public ResponseEntity<?> deleteFlight(@PathVariable("flightNumber") Integer flightNumber) {

		ResponseEntity<?> resp = null;
		try {

			ticketBookingService.cancelFlight(flightNumber);
			Map<String, Boolean> response = new HashMap<>();
			response.put("Flight is Cancled with flightNumber" + flightNumber, Boolean.TRUE);
			resp = ResponseEntity.ok(response);

		} catch (Exception e) {

			resp = new ResponseEntity<String>(" Flight not present with  this flightNumber  " + flightNumber,
					HttpStatus.NOT_FOUND);
			e.printStackTrace();
		}
		return resp;
	}
	
//    @PostMapping("/bookFlight")
//    public Integer bookFlight(@RequestBody TicketBooking ticket) {
//        Long pnrNumber = generatePNRNumber();
//        ticket.setPnrNumber(pnrNumber);
//        
//        return ticketBookingService.bookFlight(ticket);
//    }
//    
	@PostMapping("/bookFlight")
	public Integer bookFlight(@RequestBody TicketBooking ticket) {
		Long pnrNumber = generatePNRNumber();
		ticket.setPnrNumber(pnrNumber);
		Integer id = ticketBookingService.bookFlight(ticket);
		System.out.println("Flight is created with id...." + id);
		return id;

	}
    
	
	
    static Long generatePNRNumber() {
        int lenght=10;
        String number = "0123456789";

        StringBuilder sb = new StringBuilder(lenght);
        for(int i=0;i<lenght;i++) {
            int index = (int)(number.length() * Math.random());

            sb.append(number.charAt(index));
        }
        return Long.valueOf(sb.toString());
    }


}
